'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = _callee;

var _effects = require('redux-saga/effects');

var _reduxSaga = require('redux-saga');

var _reducers = require('../reducers');

var _chatStates = require('../constants/chatStates');

var chatStates = _interopRequireWildcard(_chatStates);

var _serverRequest = require('../utils/serverRequest');

var _propsActions = require('../actions/propsActions');

var _propsActions2 = _interopRequireDefault(_propsActions);

var _serverActions = require('../actions/serverActions');

var _storage = require('../utils/storage');

var _storage2 = _interopRequireDefault(_storage);

var _sagaUtils = require('@livechat/saga-utils');

var _IWCSTranslator = require('../utils/IWCSTranslator');

var _mapKeys = require('lodash/fp/mapKeys');

var _mapKeys2 = _interopRequireDefault(_mapKeys);

var _camelCase = require('lodash/fp/camelCase');

var _camelCase2 = _interopRequireDefault(_camelCase);

var _get = require('lodash/fp/get');

var _get2 = _interopRequireDefault(_get);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(closeChat),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(checkChatState),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(sendChatPing),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(watchChatStateChange),
    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

var lastSneakPeek = '';

function closeChat() {
	return regeneratorRuntime.wrap(function closeChat$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatState(chatStates.NOT_CHATTING));

				case 2:
					_context.next = 4;
					return (0, _effects.put)(_propsActions2.default.removePropertySecuredToken());

				case 4:
					_storage2.default.removeItem('securedToken');

				case 5:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function checkChatState() {
	var license, group, visitorId, securedToken, secretId, environment, requestBody, chatPingResponse, connectionStatus;
	return regeneratorRuntime.wrap(function checkChatState$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyLicense);

				case 2:
					license = _context2.sent;
					_context2.next = 5;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyGroup);

				case 5:
					group = _context2.sent;
					_context2.next = 8;
					return (0, _effects.call)(_sagaUtils.waitForState, _reducers.propsSelectors.getPropertyVisitorId);

				case 8:
					visitorId = _context2.sent;
					_context2.next = 11;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertySecuredToken);

				case 11:
					securedToken = _context2.sent;
					_context2.next = 14;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertySecretId);

				case 14:
					secretId = _context2.sent;
					_context2.next = 17;
					return (0, _effects.select)(_reducers.getEnvironment);

				case 17:
					environment = _context2.sent;

					if (!securedToken) {
						_context2.next = 43;
						break;
					}

					requestBody = {
						random_id: String(Math.random()),
						visitor: {
							id: visitorId,
							group: group
						}
					};
					_context2.prev = 20;
					_context2.next = 23;
					return (0, _effects.call)(_serverRequest.sendPostToWebserv, 'get_pending_messages', {
						environment: environment,
						license: license,
						securedToken: securedToken,
						secretId: secretId,
						body: requestBody
					});

				case 23:
					chatPingResponse = _context2.sent;

					if (!chatPingResponse.messages) {
						_context2.next = 29;
						break;
					}

					_context2.next = 27;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatState(chatStates.CHATTING));

				case 27:
					_context2.next = 31;
					break;

				case 29:
					_context2.next = 31;
					return (0, _effects.call)(closeChat);

				case 31:
					_context2.next = 41;
					break;

				case 33:
					_context2.prev = 33;
					_context2.t0 = _context2['catch'](20);
					_context2.next = 37;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 37:
					connectionStatus = _context2.sent;

					if (!(connectionStatus !== 'disconnected')) {
						_context2.next = 41;
						break;
					}

					_context2.next = 41;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('disconnected'));

				case 41:
					_context2.next = 45;
					break;

				case 43:
					_context2.next = 45;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatState(chatStates.NOT_CHATTING));

				case 45:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this, [[20, 33]]);
}

var parseMessage = function parseMessage(message) {
	if ((0, _get2.default)('message.data', message)) {
		message.message.data = (0, _mapKeys2.default)(_camelCase2.default, message.message.data);
	}
	if ((0, _get2.default)('message.name', message)) {
		message.message.name = (0, _camelCase2.default)(message.message.name);
	}
	return _extends({
		timestamp: message.timestamp,
		uniqueId: message.unique_id
	}, message.message);
};

var findLastUniqueId = function findLastUniqueId(messages) {
	return Math.max.apply(Math, [0].concat(messages.map(function (message) {
		return message.unique_id;
	})));
};

var parseChatPingResponse = function parseChatPingResponse(response) {
	return response.messages.map(function (message) {
		if (message.message_iwcs) {
			var translatedMessage = (0, _IWCSTranslator.translateIWCS)(message.message_iwcs);
			if (!translatedMessage) {
				return false;
			}
			return {
				timestamp: message.timestamp,
				unique_id: message.unique_id,
				message: translatedMessage
			};
		}
		return message;
	}).map(parseMessage).filter(Boolean);
};

function sendChatPing() {
	var license, _group, visitorId, securedToken, _secretId, chatState, environment, sneakPeek, lastUniqueId, requestBody, chatPingResponse, connectionStatus, parsedChatPingResponse, lastMessageId, _connectionStatus;

	return regeneratorRuntime.wrap(function sendChatPing$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					if (!true) {
						_context3.next = 69;
						break;
					}

					_context3.next = 3;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyLicense);

				case 3:
					license = _context3.sent;
					_context3.next = 6;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyGroup);

				case 6:
					_group = _context3.sent;
					_context3.next = 9;
					return (0, _effects.call)(_sagaUtils.waitForState, _reducers.propsSelectors.getPropertyVisitorId);

				case 9:
					visitorId = _context3.sent;
					_context3.next = 12;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertySecuredToken);

				case 12:
					securedToken = _context3.sent;
					_context3.next = 15;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertySecretId);

				case 15:
					_secretId = _context3.sent;
					_context3.next = 18;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyChatState);

				case 18:
					chatState = _context3.sent;
					_context3.next = 21;
					return (0, _effects.select)(_reducers.getEnvironment);

				case 21:
					environment = _context3.sent;
					_context3.next = 24;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertySneakPeek);

				case 24:
					sneakPeek = _context3.sent;

					if (!(securedToken && chatState === chatStates.CHATTING)) {
						_context3.next = 64;
						break;
					}

					_context3.next = 28;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyLastMessageId);

				case 28:
					lastUniqueId = _context3.sent;
					requestBody = {
						random_id: String(Math.random()),
						visitor: {
							id: visitorId,
							group: _group
						},
						last_unique_id: null
					};

					if (lastUniqueId) {
						requestBody.last_unique_id = lastUniqueId;
					}
					if (lastSneakPeek !== sneakPeek) {
						requestBody.sneak_peek = sneakPeek;
					}
					_context3.prev = 32;
					_context3.next = 35;
					return (0, _effects.call)(_serverRequest.sendPostToWebserv, 'get_pending_messages', {
						environment: environment,
						license: license,
						securedToken: securedToken,
						secretId: _secretId,
						body: requestBody
					});

				case 35:
					chatPingResponse = _context3.sent;
					_context3.next = 38;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 38:
					connectionStatus = _context3.sent;

					if (!(connectionStatus !== 'connected')) {
						_context3.next = 42;
						break;
					}

					_context3.next = 42;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('connected'));

				case 42:
					if (chatPingResponse.messages) {
						_context3.next = 47;
						break;
					}

					_context3.next = 45;
					return (0, _effects.call)(closeChat);

				case 45:
					_context3.next = 54;
					break;

				case 47:
					parsedChatPingResponse = parseChatPingResponse(chatPingResponse);
					_context3.next = 50;
					return (0, _effects.all)(parsedChatPingResponse.map(function (message) {
						return (0, _effects.put)((0, _serverActions.incomingMessage)({ name: message.name, message: message }));
					}));

				case 50:
					lastMessageId = findLastUniqueId(chatPingResponse.messages);

					if (!lastMessageId) {
						_context3.next = 54;
						break;
					}

					_context3.next = 54;
					return (0, _effects.put)(_propsActions2.default.setPropertyLastMessageId(lastMessageId));

				case 54:
					_context3.next = 64;
					break;

				case 56:
					_context3.prev = 56;
					_context3.t0 = _context3['catch'](32);
					_context3.next = 60;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 60:
					_connectionStatus = _context3.sent;

					if (!(_connectionStatus !== 'disconnected')) {
						_context3.next = 64;
						break;
					}

					_context3.next = 64;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('disconnected'));

				case 64:
					lastSneakPeek = sneakPeek;
					_context3.next = 67;
					return (0, _effects.call)(_reduxSaga.delay, 1800);

				case 67:
					_context3.next = 0;
					break;

				case 69:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this, [[32, 56]]);
}

function watchChatStateChange() {
	return regeneratorRuntime.wrap(function watchChatStateChange$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					_context4.next = 2;
					return (0, _effects.call)(_sagaUtils.waitForState, _reducers.propsSelectors.getPropertyChatState);

				case 2:
					_context4.next = 4;
					return (0, _effects.call)(sendChatPing);

				case 4:
					_context4.next = 6;
					return (0, _effects.takeEvery)(_propsActions2.default.setPropertyChatState.getActionName(), sendChatPing);

				case 6:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}

function _callee() {
	return regeneratorRuntime.wrap(function _callee$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					_context5.next = 2;
					return (0, _effects.spawn)(checkChatState);

				case 2:
					_context5.next = 4;
					return (0, _effects.spawn)(watchChatStateChange);

				case 4:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked5, this);
}