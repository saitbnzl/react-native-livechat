'use strict';

exports.__esModule = true;

var _effects = require('redux-saga/effects');

var _sagaUtils = require('@livechat/saga-utils');

var _propsActions = require('../../actions/propsActions');

var _propsActions2 = _interopRequireDefault(_propsActions);

var _serverRequest = require('../../utils/serverRequest');

var _reducers = require('../../reducers');

var _storage = require('../../utils/storage');

var _storage2 = _interopRequireDefault(_storage);

var _chatStates = require('../../constants/chatStates');

var chatStates = _interopRequireWildcard(_chatStates);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(startChat);

function startChat(_ref) {
	var customId = _ref.customId,
	    text = _ref.text;
	var license, group, visitorId, visitorData, environment, startChatBody, startChatData, startChatResponse;
	return regeneratorRuntime.wrap(function startChat$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyLicense);

				case 2:
					license = _context.sent;
					_context.next = 5;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyGroup);

				case 5:
					group = _context.sent;
					_context.next = 8;
					return (0, _effects.call)(_sagaUtils.waitForState, _reducers.propsSelectors.getPropertyVisitorId);

				case 8:
					visitorId = _context.sent;
					_context.next = 11;
					return (0, _effects.select)(_reducers.getVisitorData);

				case 11:
					visitorData = _context.sent;
					_context.next = 14;
					return (0, _effects.select)(_reducers.getEnvironment);

				case 14:
					environment = _context.sent;
					startChatBody = {
						group: group,
						source_group: group,
						details: '',
						details_labels: '',
						from_manual_invitation: false,
						integration_params: '',
						random_id: customId,
						trigger_unique_id: '',
						version: 'Embedded',
						custom_variables: {},
						welcome_message: '',
						is_mobile: false,
						return_secured_session_id: true,
						visitor: {
							id: visitorId,
							nick: visitorData.name || 'Client',
							email: visitorData.email || ''
						}
					};

					if (text) {
						startChatBody.visitor_message = text;
						startChatBody.visitor_message_id = customId;
					}
					if (visitorData.customProperties) {
						startChatBody.custom_variables = visitorData.customProperties;
					}
					startChatData = {
						license: license,
						environment: environment,
						body: startChatBody
					};
					_context.next = 21;
					return (0, _effects.call)(_serverRequest.sendPostToWebserv, 'start_chat', startChatData);

				case 21:
					startChatResponse = _context.sent;

					if (!startChatResponse.secured_session_id) {
						_context.next = 26;
						break;
					}

					_context.next = 25;
					return (0, _effects.put)(_propsActions2.default.setPropertySecretId(startChatResponse.secured_session_id));

				case 25:
					_storage2.default.setItem('secretId', startChatResponse.secured_session_id);

				case 26:
					if (!startChatResponse.secured_token) {
						_context.next = 32;
						break;
					}

					_context.next = 29;
					return (0, _effects.put)(_propsActions2.default.setPropertySecuredToken(startChatResponse.secured_token));

				case 29:
					_context.next = 31;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatState(chatStates.CHATTING));

				case 31:
					_storage2.default.setItem('securedToken', startChatResponse.secured_token);

				case 32:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

exports.default = startChat;