'use strict';

exports.__esModule = true;
exports.default = rootSaga;

var _effects = require('redux-saga/effects');

var _publicActions = require('../actions/publicActions');

var publicActions = _interopRequireWildcard(_publicActions);

var _sagaUtils = require('@livechat/saga-utils');

var _configSaga = require('./configSaga.js');

var _configSaga2 = _interopRequireDefault(_configSaga);

var _pingerSaga = require('./pingerSaga.js');

var _pingerSaga2 = _interopRequireDefault(_pingerSaga);

var _statusPingerSaga = require('./statusPingerSaga.js');

var _statusPingerSaga2 = _interopRequireDefault(_statusPingerSaga);

var _publicActionsHandler = require('./publicActionsHandler.js');

var _publicActionsHandler2 = _interopRequireDefault(_publicActionsHandler);

var _publicCallbacksHandler = require('./publicCallbacksHandler.js');

var _publicCallbacksHandler2 = _interopRequireDefault(_publicCallbacksHandler);

var _chatPingerSaga = require('./chatPingerSaga.js');

var _chatPingerSaga2 = _interopRequireDefault(_chatPingerSaga);

var _serverActionsSaga = require('./serverActionsSaga.js');

var _serverActionsSaga2 = _interopRequireDefault(_serverActionsSaga);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(pingersCaller),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(rootSaga);

var restoreConnectionActions = [publicActions.publicSendMessage, publicActions.publicSetVisitorData].map(function (action) {
	return action.getActionName();
});

function pingersCaller() {
	var statusPingerTask, chatPingerTask, pingerTask;
	return regeneratorRuntime.wrap(function pingersCaller$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!true) {
						_context.next = 18;
						break;
					}

					_context.next = 3;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_statusPingerSaga2.default));

				case 3:
					statusPingerTask = _context.sent;
					_context.next = 6;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_chatPingerSaga2.default));

				case 6:
					chatPingerTask = _context.sent;
					_context.next = 9;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_pingerSaga2.default));

				case 9:
					pingerTask = _context.sent;
					_context.next = 12;
					return (0, _effects.take)(publicActions.publicDisconnect.getActionName());

				case 12:
					_context.next = 14;
					return (0, _effects.cancel)(statusPingerTask, chatPingerTask, pingerTask);

				case 14:
					_context.next = 16;
					return (0, _effects.take)(restoreConnectionActions, pingersCaller);

				case 16:
					_context.next = 0;
					break;

				case 18:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function rootSaga(_ref) {
	var emitter = _ref.emitter;
	return regeneratorRuntime.wrap(function rootSaga$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_configSaga2.default));

				case 2:
					_context2.next = 4;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_publicActionsHandler2.default));

				case 4:
					_context2.next = 6;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_publicCallbacksHandler2.default, { emitter: emitter }));

				case 6:
					_context2.next = 8;
					return (0, _sagaUtils.safe)((0, _effects.fork)(_serverActionsSaga2.default));

				case 8:
					_context2.next = 10;
					return (0, _sagaUtils.safe)((0, _effects.fork)(pingersCaller));

				case 10:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}