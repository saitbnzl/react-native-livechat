'use strict';

exports.__esModule = true;
exports.default = _callee;

var _effects = require('redux-saga/effects');

var _reduxSaga = require('redux-saga');

var _JSONMessageNames = require('../constants/JSONMessageNames');

var JSONMessageNames = _interopRequireWildcard(_JSONMessageNames);

var _IWCSTranslator = require('../utils/IWCSTranslator');

var _chatActions = require('../actions/chatActions');

var chatActions = _interopRequireWildcard(_chatActions);

var _getOr = require('lodash/fp/getOr');

var _getOr2 = _interopRequireDefault(_getOr);

var _storage = require('../utils/storage');

var _storage2 = _interopRequireDefault(_storage);

var _serverActions = require('../actions/serverActions');

var _reducers = require('../reducers');

var _chatStates = require('../constants/chatStates');

var chatStates = _interopRequireWildcard(_chatStates);

var _propsActions = require('../actions/propsActions');

var _propsActions2 = _interopRequireDefault(_propsActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(parseIncomingServerMessage),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

function parseIncomingServerMessage(_ref) {
	var payload = _ref.payload;
	var message, chatId;
	return regeneratorRuntime.wrap(function parseIncomingServerMessage$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					message = payload.message;

					message.timestamp *= 1000;

					_context.t0 = message.name;
					_context.next = _context.t0 === JSONMessageNames.START_CHAT ? 5 : _context.t0 === JSONMessageNames.SEND_MESSAGE ? 11 : _context.t0 === _IWCSTranslator.IWCSMessageNames.RATE_CHAT ? 14 : _context.t0 === JSONMessageNames.CHAT_ATTACHMENT ? 17 : _context.t0 === _IWCSTranslator.IWCSMessageNames.NEW_AGENT_MESSAGE ? 20 : _context.t0 === _IWCSTranslator.IWCSMessageNames.CHAT_ENDED ? 23 : _context.t0 === _IWCSTranslator.IWCSMessageNames.NEW_AGENT ? 31 : _context.t0 === _IWCSTranslator.IWCSMessageNames.VISITOR_QUEUED ? 40 : _context.t0 === _IWCSTranslator.IWCSMessageNames.TYPING_INDICATOR ? 43 : 46;
					break;

				case 5:
					_context.next = 7;
					return (0, _effects.put)(chatActions.chatStarted({
						securedToken: (0, _getOr2.default)(_storage2.default.getItem('securedToken'), 'securedToken', payload)
					}));

				case 7:
					if (!message.data.visitorMessage) {
						_context.next = 10;
						break;
					}

					_context.next = 10;
					return (0, _effects.put)(chatActions.newMessage({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorType: 'visitor',
						text: message.data.visitorMessage,
						customId: message.data.randomId
					}));

				case 10:
					return _context.abrupt('break', 47);

				case 11:
					_context.next = 13;
					return (0, _effects.put)(chatActions.newMessage({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorType: 'visitor',
						text: message.data.message,
						customId: message.data.randomId
					}));

				case 13:
					return _context.abrupt('break', 47);

				case 14:
					_context.next = 16;
					return (0, _effects.put)(chatActions.rateChat({
						id: message.uniqueId,
						timestamp: message.timestamp,
						rate: message.data.rate,
						comment: message.data.comment
					}));

				case 16:
					return _context.abrupt('break', 47);

				case 17:
					_context.next = 19;
					return (0, _effects.put)(chatActions.newFile({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorId: message.data.author.login || 'visitor',
						authorType: message.data.author.type,
						url: message.data.files[0].url,
						size: message.data.files[0].size,
						contentType: message.data.files[0]['content-type']
					}));

				case 19:
					return _context.abrupt('break', 47);

				case 20:
					_context.next = 22;
					return (0, _effects.put)(chatActions.newMessage({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorType: 'agent',
						text: message.data.message,
						isMobile: message.data.isMobile,
						authorId: message.data.authorId
					}));

				case 22:
					return _context.abrupt('break', 47);

				case 23:
					_context.next = 25;
					return (0, _effects.put)(chatActions.chatEnded());

				case 25:
					_context.next = 27;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatState(chatStates.NOT_CHATTING));

				case 27:
					_context.next = 29;
					return (0, _effects.put)(_propsActions2.default.removePropertySecuredToken());

				case 29:
					_storage2.default.removeItem('securedToken');
					return _context.abrupt('break', 47);

				case 31:
					_context.next = 33;
					return (0, _effects.put)(chatActions.newAgent({
						id: message.data.id,
						name: message.data.name,
						jobTitle: message.data.jobTitle,
						avatarUrl: message.data.avatarUrl
					}));

				case 33:
					_context.next = 35;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyChatId);

				case 35:
					chatId = _context.sent;

					if (chatId) {
						_context.next = 39;
						break;
					}

					_context.next = 39;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatId(message.data.chatId));

				case 39:
					return _context.abrupt('break', 47);

				case 40:
					_context.next = 42;
					return (0, _effects.put)(chatActions.visitorQueued({
						numberInQueue: message.data.numberInQueue,
						waitingTime: message.data.waitingTime
					}));

				case 42:
					return _context.abrupt('break', 47);

				case 43:
					_context.next = 45;
					return (0, _effects.put)(chatActions.typingIndicator({
						authorId: message.data.authorId,
						isTyping: message.data.isTyping
					}));

				case 45:
					return _context.abrupt('break', 47);

				case 46:
					return _context.abrupt('return');

				case 47:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function _callee() {
	var incomingMessageChannel, action;
	return regeneratorRuntime.wrap(function _callee$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return (0, _effects.actionChannel)(_serverActions.incomingMessage.getActionName(), _reduxSaga.buffers.expanding());

				case 2:
					incomingMessageChannel = _context2.sent;

				case 3:
					if (!true) {
						_context2.next = 11;
						break;
					}

					_context2.next = 6;
					return (0, _effects.take)(incomingMessageChannel);

				case 6:
					action = _context2.sent;
					_context2.next = 9;
					return (0, _effects.call)(parseIncomingServerMessage, action);

				case 9:
					_context2.next = 3;
					break;

				case 11:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}