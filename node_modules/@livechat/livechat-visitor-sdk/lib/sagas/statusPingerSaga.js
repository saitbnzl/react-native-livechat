'use strict';

exports.__esModule = true;

var _effects = require('redux-saga/effects');

var _reduxSaga = require('redux-saga');

var _sagaUtils = require('@livechat/saga-utils');

var _reducers = require('../reducers');

var _serverRequest = require('../utils/serverRequest');

var _propsActions = require('../actions/propsActions');

var _propsActions2 = _interopRequireDefault(_propsActions);

var _chatStatuses = require('../constants/chatStatuses');

var chatStatuses = _interopRequireWildcard(_chatStatuses);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(sendPing);

var parseResponseToChatStatus = function parseResponseToChatStatus(response) {
	return response.agent_available ? chatStatuses.ONLINE : chatStatuses.OFFLINE;
};

function sendPing() {
	var license, group, visitorId, environment, requestBody, statusPingResponse, chatState, currentChatStatus, connectionStatus, _connectionStatus;

	return regeneratorRuntime.wrap(function sendPing$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!true) {
						_context.next = 45;
						break;
					}

					_context.next = 3;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyLicense);

				case 3:
					license = _context.sent;
					_context.next = 6;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyGroup);

				case 6:
					group = _context.sent;
					_context.next = 9;
					return (0, _effects.call)(_sagaUtils.waitForState, _reducers.propsSelectors.getPropertyVisitorId);

				case 9:
					visitorId = _context.sent;
					_context.next = 12;
					return (0, _effects.select)(_reducers.getEnvironment);

				case 12:
					environment = _context.sent;
					requestBody = {
						visitor: {
							id: visitorId
						},
						skill: group,
						random_id: String(Math.random())
					};
					_context.prev = 14;
					_context.next = 17;
					return (0, _effects.call)(_serverRequest.sendPostToWebserv, 'status_ping', {
						license: license,
						environment: environment,
						body: requestBody
					}, {
						retry: 10
					});

				case 17:
					statusPingResponse = _context.sent;
					_context.next = 20;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyChatStatus);

				case 20:
					chatState = _context.sent;
					currentChatStatus = parseResponseToChatStatus(statusPingResponse);
					_context.next = 24;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 24:
					connectionStatus = _context.sent;

					if (!(connectionStatus !== 'connected')) {
						_context.next = 28;
						break;
					}

					_context.next = 28;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('connected'));

				case 28:
					if (!(chatState !== currentChatStatus)) {
						_context.next = 31;
						break;
					}

					_context.next = 31;
					return (0, _effects.put)(_propsActions2.default.setPropertyChatStatus(currentChatStatus));

				case 31:
					_context.next = 41;
					break;

				case 33:
					_context.prev = 33;
					_context.t0 = _context['catch'](14);
					_context.next = 37;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 37:
					_connectionStatus = _context.sent;

					if (!(_connectionStatus !== 'disconnected')) {
						_context.next = 41;
						break;
					}

					_context.next = 41;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('disconnected'));

				case 41:
					_context.next = 43;
					return (0, _effects.call)(_reduxSaga.delay, 3000);

				case 43:
					_context.next = 0;
					break;

				case 45:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this, [[14, 33]]);
}

exports.default = sendPing;