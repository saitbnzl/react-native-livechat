'use strict';

exports.__esModule = true;
exports.default = _callee;

var _effects = require('redux-saga/effects');

var _reduxSaga = require('redux-saga');

var _sagaUtils = require('@livechat/saga-utils');

var _reducers = require('../reducers');

var _serverRequest = require('../utils/serverRequest');

var _propsActions = require('../actions/propsActions');

var _propsActions2 = _interopRequireDefault(_propsActions);

var _chatActions = require('../actions/chatActions');

var chatActions = _interopRequireWildcard(_chatActions);

var _customVariablesUtils = require('../utils/customVariablesUtils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(sendPingRequest),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(watchSetVisitorActions),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(startPing),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

var prepareRequestBody = function prepareRequestBody(sendAllDetails, visitorId, group, visitorData) {
	var requestBody = {
		visitor: {
			id: visitorId,
			group: group
		}
	};
	if (sendAllDetails) {
		requestBody.page = {
			title: visitorData.pageTitle,
			url: visitorData.pageUrl
		};
	}

	if (sendAllDetails && visitorData.email) {
		requestBody.visitor.email = visitorData.email;
	}
	if (sendAllDetails && visitorData.name) {
		requestBody.visitor.name = visitorData.name;
	}
	if (sendAllDetails && visitorData.customProperties) {
		requestBody.visitor.custom_variables = (0, _customVariablesUtils.parseCustomVariables)(visitorData.customProperties);
	}
	return requestBody;
};

function sendPingRequest(_ref) {
	var sendFullPing = _ref.sendFullPing;

	var visitorId, license, group, visitorData, environment, requestBody, pingResponse, connectionStatus, _connectionStatus;

	return regeneratorRuntime.wrap(function sendPingRequest$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return (0, _effects.call)(_sagaUtils.waitForState, _reducers.propsSelectors.getPropertyVisitorId);

				case 2:
					visitorId = _context.sent;
					_context.next = 5;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyLicense);

				case 5:
					license = _context.sent;
					_context.next = 8;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyGroup);

				case 8:
					group = _context.sent;
					_context.next = 11;
					return (0, _effects.select)(_reducers.getVisitorData);

				case 11:
					visitorData = _context.sent;
					_context.next = 14;
					return (0, _effects.select)(_reducers.getEnvironment);

				case 14:
					environment = _context.sent;
					requestBody = prepareRequestBody(sendFullPing, visitorId, group, visitorData);
					_context.prev = 16;
					_context.next = 19;
					return (0, _effects.call)(_serverRequest.sendPostToWebserv, 'ping', {
						license: license,
						environment: environment,
						body: requestBody
					}, {
						retry: 10
					});

				case 19:
					pingResponse = _context.sent;
					_context.next = 22;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 22:
					connectionStatus = _context.sent;

					if (!(connectionStatus !== 'connected')) {
						_context.next = 26;
						break;
					}

					_context.next = 26;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('connected'));

				case 26:
					return _context.abrupt('return', pingResponse);

				case 29:
					_context.prev = 29;
					_context.t0 = _context['catch'](16);
					_context.next = 33;
					return (0, _effects.select)(_reducers.propsSelectors.getPropertyConnectionStatus);

				case 33:
					_connectionStatus = _context.sent;

					if (!(_connectionStatus !== 'disconnected')) {
						_context.next = 37;
						break;
					}

					_context.next = 37;
					return (0, _effects.put)(_propsActions2.default.setPropertyConnectionStatus('disconnected'));

				case 37:
					return _context.abrupt('return', {
						error: true
					});

				case 38:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this, [[16, 29]]);
}

function watchSetVisitorActions() {
	var setVisitorDataActionChannel, action, requestResponse, visitorData;
	return regeneratorRuntime.wrap(function watchSetVisitorActions$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return (0, _effects.actionChannel)(chatActions.setVisitorData.getActionName(), _reduxSaga.buffers.expanding());

				case 2:
					setVisitorDataActionChannel = _context2.sent;

				case 3:
					if (!true) {
						_context2.next = 21;
						break;
					}

					_context2.next = 6;
					return (0, _effects.take)(setVisitorDataActionChannel);

				case 6:
					action = _context2.sent;
					_context2.next = 9;
					return (0, _effects.call)(sendPingRequest, {
						sendFullPing: true
					});

				case 9:
					requestResponse = _context2.sent;

					if (!requestResponse.error) {
						_context2.next = 14;
						break;
					}

					_context2.next = 13;
					return (0, _effects.put)((0, _chatActions.visitorDataSetError)({
						error: requestResponse.error,
						requestId: action.payload.requestId
					}));

				case 13:
					return _context2.abrupt('return', _context2.sent);

				case 14:
					_context2.next = 16;
					return (0, _effects.select)(_reducers.getVisitorData);

				case 16:
					visitorData = _context2.sent;
					_context2.next = 19;
					return (0, _effects.put)((0, _chatActions.visitorDataSet)({
						visitorData: visitorData,
						requestId: action.payload.requestId
					}));

				case 19:
					_context2.next = 3;
					break;

				case 21:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function startPing() {
	var nextPing, sendFullPing, pingResponse, lastSendFullPing;
	return regeneratorRuntime.wrap(function startPing$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					nextPing = 3;
					sendFullPing = true;

				case 2:
					if (!true) {
						_context3.next = 13;
						break;
					}

					_context3.next = 5;
					return (0, _effects.call)(sendPingRequest, { sendFullPing: sendFullPing });

				case 5:
					pingResponse = _context3.sent;
					lastSendFullPing = sendFullPing;

					sendFullPing = Boolean(pingResponse.next_ping_send_full_details);
					if (!lastSendFullPing && sendFullPing) {
						nextPing = 0;
					} else {
						nextPing = pingResponse.next_ping_delay || 3;
					}
					_context3.next = 11;
					return (0, _effects.call)(_reduxSaga.delay, nextPing * 1000);

				case 11:
					_context3.next = 2;
					break;

				case 13:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

// export default sendPing
function _callee() {
	return regeneratorRuntime.wrap(function _callee$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					_context4.next = 2;
					return (0, _effects.fork)(startPing);

				case 2:
					_context4.next = 4;
					return (0, _effects.fork)(watchSetVisitorActions);

				case 4:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}