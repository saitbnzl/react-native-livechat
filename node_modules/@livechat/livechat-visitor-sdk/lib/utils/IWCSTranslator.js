'use strict';

exports.__esModule = true;
exports.translateToIWCS = exports.translateIWCS = exports.IWCSMessageNames = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _rateMap;

var _identity = require('lodash/fp/identity');

var _identity2 = _interopRequireDefault(_identity);

var _findKey = require('lodash/fp/findKey');

var _findKey2 = _interopRequireDefault(_findKey);

var _rates = require('../constants/rates');

var rates = _interopRequireWildcard(_rates);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stripIncorrectCharacters = function stripIncorrectCharacters(text) {
	/**
  * Function removes those ASCII characters ranges:
  * 1-8, 11-12, 14-31, 127
  */
	return text.replace(/[\x01-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '');
};

var codeToBoolean = function codeToBoolean(code) {
	if (code === '1') {
		return true;
	}
	return false;
};

var rateMap = (_rateMap = {}, _rateMap[rates.NONE] = '0', _rateMap[rates.BAD] = '1', _rateMap[rates.GOOD] = '2', _rateMap);

var parseSubIWCS = function parseSubIWCS(subIWCS) {
	var params = subIWCS.split('&#45;');
	return {
		authorId: params[1],
		isTyping: codeToBoolean(params[2])
	};
};

// const rateToCode = (rate: $Values<typeof rates>) => rateMap[rate]
var rateToCode = function rateToCode(rate) {
	return rateMap[rate];
};

var IWCSMessageNames = exports.IWCSMessageNames = {
	NEW_AGENT: 'newAgent',
	NEW_AGENT_MESSAGE: 'newAgentMessage',
	CHAT_ENDED: 'chatEnded',
	VISITOR_QUEUED: 'visitorQueued',
	TYPING_INDICATOR: 'typingIndicator',
	RATE_CHAT: 'rateChat',
	FORWARD_CHAT_TRANSCRIPT: 'forwardChatTranscript'

	// const parseAgentIds = (agentsIds: string) => agentsIds.replace(/\;$/, '').split(';')

};var IWCSDictionary = {
	IWCS0002R: [IWCSMessageNames.NEW_AGENT, {
		'1': ['id'],
		'2': ['name'],
		// '4': ['chatId'], // WTF?!
		'12': ['chatId'], // old conference_id
		// '16': ['operators_id', parseAgentIds],
		'23': ['avatarUrl'],
		'25': ['jobTitle']
	}],
	IWCS0006R: [IWCSMessageNames.NEW_AGENT_MESSAGE, {
		'1': ['authorId'],
		'2': ['message'],
		'9': ['isMobile', codeToBoolean],
		'10': ['id']
	}],
	IWCS1007S: [IWCSMessageNames.CHAT_ENDED, null],
	IWCS1002S: [IWCSMessageNames.VISITOR_QUEUED, {
		'2': ['numberInQueue', parseInt],
		'3': ['waitingTime', parseInt]
	}],
	IWCS0002P: [IWCSMessageNames.TYPING_INDICATOR, {
		'2': ['realCommand', parseSubIWCS]
	}],
	IWCS0113C: [IWCSMessageNames.RATE_CHAT, {
		'1': ['visitorId'],
		'2': ['chatId'],
		'3': ['rate', rateToCode]
	}],
	IWCS0069C: [IWCSMessageNames.FORWARD_CHAT_TRANSCRIPT, {
		'1': ['visitorId'],
		'2': ['email'],
		'5': ['chatId']
	}]
};

var translateIWCS = exports.translateIWCS = function translateIWCS(IWCSMessage) {
	var splittedMessage = IWCSMessage.split('^');
	var commandCode = splittedMessage[0],
	    data = splittedMessage.slice(1);

	var command = IWCSDictionary[commandCode];

	if (!command) {
		return null;
	}

	var commandName = command[0],
	    paramsMap = command[1];

	var parsedData = data.reduce(function (parsed, param, index) {
		if (!paramsMap || !paramsMap[index + 1]) {
			return parsed;
		}
		var _paramsMap = paramsMap[index + 1],
		    paramName = _paramsMap[0],
		    _paramsMap$ = _paramsMap[1],
		    parseFunction = _paramsMap$ === undefined ? _identity2.default : _paramsMap$;

		if (paramName === 'realCommand') {
			return _extends({}, parsed, parseFunction(param));
		}
		parsed[paramName] = parseFunction(param);
		return parsed;
	}, {});

	return {
		name: commandName,
		data: parsedData
	};
};

var translateToIWCS = exports.translateToIWCS = function translateToIWCS(methodName, data) {
	var IWCSCommandCode = (0, _findKey2.default)(function (iwcs) {
		return iwcs[0] === methodName;
	}, IWCSDictionary);
	var IWCSShapeDeclaration = IWCSDictionary[IWCSCommandCode][1];
	var maxParam = Math.max.apply(Math, Object.keys(IWCSShapeDeclaration));
	var translatedIWCS = [IWCSCommandCode];
	while (translatedIWCS.length < maxParam + 1) {
		var paramData = IWCSShapeDeclaration[translatedIWCS.length];
		if (!paramData) {
			translatedIWCS.push('');
			continue;
		}
		var paramName = paramData[0];
		var parsedData = stripIncorrectCharacters(data[paramName]).replace(/\^/g, '&#94;');
		if (paramData[1]) {
			translatedIWCS.push(paramData[1](parsedData));
			continue;
		}
		translatedIWCS.push(parsedData);
	}
	return translatedIWCS.join('^') + '^';
};