'use strict';

exports.__esModule = true;
exports.init = undefined;

require('regenerator-runtime/runtime');

var _utils = require('redux-saga/utils');

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

var _sagas = require('./sagas');

var _sagas2 = _interopRequireDefault(_sagas);

var _storage = require('./utils/storage');

var _storage2 = _interopRequireDefault(_storage);

var _propsActions = require('./actions/propsActions');

var _propsActions2 = _interopRequireDefault(_propsActions);

var _chatActions = require('./actions/chatActions');

var chatActions = _interopRequireWildcard(_chatActions);

var _environment = require('./utils/environment');

var _publicActions = require('./actions/publicActions');

var _mitt = require('mitt');

var _mitt2 = _interopRequireDefault(_mitt);

var _environments = require('./constants/environments');

var environments = _interopRequireWildcard(_environments);

var _rates = require('./constants/rates');

var rates = _interopRequireWildcard(_rates);

var _getOr = require('lodash/fp/getOr');

var _getOr2 = _interopRequireDefault(_getOr);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sendMessage = function sendMessage(store) {
	return function () {
		var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    text = _ref.text,
		    customId = _ref.customId;

		var sendMessagePromise = (0, _utils.deferred)();
		if (!text || !customId) {
			sendMessagePromise.reject({
				type: 'missing argument',
				reason: 'Missing text or customId parameter'
			});
			return sendMessagePromise.promise;
		}
		store.dispatch((0, _publicActions.publicSendMessage)({
			customId: customId,
			text: text,
			promise: sendMessagePromise
		}));
		return sendMessagePromise.promise;
	};
};


var setSneakPeek = function setSneakPeek(store) {
	return function (_ref2) {
		var text = _ref2.text;

		var setSneakPeekPromise = (0, _utils.deferred)();
		store.dispatch((0, _publicActions.publicSetSneakPeek)({
			text: text,
			promise: setSneakPeekPromise
		}));
		return setSneakPeekPromise.promise;
	};
};

var rateChat = function rateChat(store) {
	return function () {
		var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    rate = _ref3.rate,
		    comment = _ref3.comment;

		var rateChatPromise = (0, _utils.deferred)();
		if (!rate) {
			rateChatPromise.reject({
				type: 'missing argument',
				reason: 'Missing rate parameter'
			});
			return rateChatPromise.promise;
		}
		if (rate !== rates.GOOD && rate !== rates.NONE && rate !== rates.BAD) {
			rateChatPromise.reject({
				type: 'wrong argument',
				reason: 'Rate argument should be equal "good", "bad" or "none"'
			});
			return rateChatPromise.promise;
		}
		store.dispatch((0, _publicActions.publicRateChat)({
			rate: rate,
			comment: comment,
			promise: rateChatPromise
		}));
		return rateChatPromise.promise;
	};
};

var forwardChatTranscript = function forwardChatTranscript(store) {
	return function () {
		var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    email = _ref4.email;

		var forwardChatTranscriptPromise = (0, _utils.deferred)();
		if (!email) {
			forwardChatTranscriptPromise.reject({
				type: 'missing argument',
				reason: 'Missing email parameter'
			});
			return forwardChatTranscriptPromise.promise;
		}
		store.dispatch((0, _publicActions.publicForwardChatTranscript)({
			email: email,
			promise: forwardChatTranscriptPromise
		}));
		return forwardChatTranscriptPromise.promise;
	};
};

var closeChat = function closeChat(store) {
	return function () {
		var closeChatPromise = (0, _utils.deferred)();
		store.dispatch((0, _publicActions.publicCloseChat)({
			promise: closeChatPromise
		}));
		return closeChatPromise.promise;
	};
};

var disconnect = function disconnect(store) {
	return function () {
		var disconnectPromise = (0, _utils.deferred)();
		store.dispatch((0, _publicActions.publicDisconnect)({
			promise: disconnectPromise
		}));
		return disconnectPromise.promise;
	};
};

var destroy = function destroy(rootTask, emitter) {
	return function () {
		emitter.off('*');
		rootTask.cancel();
	};
};

var getTicketForm = function getTicketForm(store) {
	return function () {
		var getTicketFormPromise = (0, _utils.deferred)();
		store.dispatch((0, _publicActions.publicGetTicketForm)({
			promise: getTicketFormPromise
		}));
		return getTicketFormPromise.promise;
	};
};

var sendTicketForm = function sendTicketForm(store) {
	return function () {
		var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    name = _ref5.name,
		    email = _ref5.email,
		    subject = _ref5.subject,
		    message = _ref5.message;

		var sendTicketFormPromise = (0, _utils.deferred)();
		if (!email) {
			sendTicketFormPromise.reject({
				type: 'missing argument',
				reason: 'Missing email'
			});
			return sendTicketFormPromise.promise;
		}
		if (!message) {
			sendTicketFormPromise.reject({
				type: 'missing argument',
				reason: 'Missing message'
			});
			return sendTicketFormPromise.promise;
		}
		store.dispatch((0, _publicActions.publicSendTicketForm)({
			name: name,
			email: email,
			subject: subject,
			message: message,
			promise: sendTicketFormPromise
		}));
		return sendTicketFormPromise.promise;
	};
};

var setVisitorData = function setVisitorData(store) {
	return function () {
		var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    name = _ref6.name,
		    email = _ref6.email,
		    customProperties = _ref6.customProperties,
		    pageUrl = _ref6.pageUrl,
		    pageTitle = _ref6.pageTitle;

		var setVistiorDataPromise = (0, _utils.deferred)();
		if (!name && !email && !customProperties && !pageUrl && !pageTitle) {
			setVistiorDataPromise.reject({
				type: 'missing argument',
				reason: 'Missing name, email, url or customProperties'
			});
			return setVistiorDataPromise.promise;
		}
		store.dispatch((0, _publicActions.publicSetVisitorData)({
			name: name,
			email: email,
			customProperties: customProperties,
			pageUrl: pageUrl,
			pageTitle: pageTitle,
			promise: setVistiorDataPromise
		}));
		return setVistiorDataPromise.promise;
	};
};

var getVisitorData = function getVisitorData(store) {
	return function () {
		var getVisitorDataPromise = (0, _utils.deferred)();
		store.dispatch((0, _publicActions.publicGetVisitorData)({
			promise: getVisitorDataPromise
		}));
		return getVisitorDataPromise.promise;
	};
};

var init = exports.init = function init() {
	var _initialState;

	var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    license = _ref7.license,
	    _ref7$group = _ref7.group,
	    group = _ref7$group === undefined ? 0 : _ref7$group,
	    _ref7$environment = _ref7.environment,
	    environment = _ref7$environment === undefined ? environments.PRODUCTION : _ref7$environment;

	var emitter = new _mitt2.default();
	if (!license) {
		throw new Error('Missing license parameter');
	}
	if (environment !== environments.PRODUCTION && environment !== environments.LABS && environment !== environments.STAGING) {
		throw new Error('Wrong environment parameter');
	}
	var sessionId = String(Math.random());
	_storage2.default.setPrefix('_livechat_' + license);
	var initialState = (_initialState = {
		environment: environment
	}, _initialState[_propsActions.propsConstants.LICENSE] = license, _initialState[_propsActions.propsConstants.GROUP] = group, _initialState[_propsActions.propsConstants.SESSION_ID] = sessionId, _initialState.visitorData = {
		pageUrl: (0, _getOr2.default)('unknown', 'location.href', _environment.isBrowser && document),
		pageTitle: (0, _getOr2.default)('unknown', '[0].innerHTML', _environment.isBrowser && document.getElementsByTagName('title') || {})
	}, _initialState[_propsActions.propsConstants.SECURED_TOKEN] = _storage2.default.getItem('securedToken'), _initialState[_propsActions.propsConstants.SECRET_ID] = _storage2.default.getItem('secretId'), _initialState);
	var store = (0, _store2.default)(initialState);
	var visitorId = _storage2.default.getItem('visitorId');
	var rootTask = store.runSaga(_sagas2.default, {
		emitter: emitter
	});
	if (visitorId) {
		store.dispatch(_propsActions2.default.setPropertyVisitorId(visitorId));
	}
	return {
		sendMessage: sendMessage(store),
		setSneakPeek: setSneakPeek(store),
		setVisitorData: setVisitorData(store),
		getVisitorData: getVisitorData(store),
		rateChat: rateChat(store),
		forwardChatTranscript: forwardChatTranscript(store),
		closeChat: closeChat(store),
		disconnect: disconnect(store),
		getTicketForm: getTicketForm(store),
		sendTicketForm: sendTicketForm(store),
		on: emitter.on,
		destroy: destroy(rootTask, emitter)
	};
};