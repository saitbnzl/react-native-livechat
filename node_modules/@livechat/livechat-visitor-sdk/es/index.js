import 'regenerator-runtime/runtime';
import { deferred } from 'redux-saga/utils';
import configureStore from './store';
import rootSaga from './sagas';
import storage from './utils/storage';
import propsActions, { propsConstants } from './actions/propsActions';

import * as chatActions from './actions/chatActions';
import { isBrowser } from './utils/environment';
import { publicSendMessage, publicSetVisitorData, publicGetVisitorData, publicRateChat, publicSetSneakPeek, publicForwardChatTranscript, publicCloseChat, publicDisconnect, publicGetTicketForm, publicSendTicketForm } from './actions/publicActions';
import mitt from 'mitt';
import * as environments from './constants/environments';
import * as rates from './constants/rates';

import getOr from 'lodash/fp/getOr';

var sendMessage = function sendMessage(store) {
	return function () {
		var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    text = _ref.text,
		    customId = _ref.customId;

		var sendMessagePromise = deferred();
		if (!text || !customId) {
			sendMessagePromise.reject({
				type: 'missing argument',
				reason: 'Missing text or customId parameter'
			});
			return sendMessagePromise.promise;
		}
		store.dispatch(publicSendMessage({
			customId: customId,
			text: text,
			promise: sendMessagePromise
		}));
		return sendMessagePromise.promise;
	};
};

var setSneakPeek = function setSneakPeek(store) {
	return function (_ref2) {
		var text = _ref2.text;

		var setSneakPeekPromise = deferred();
		store.dispatch(publicSetSneakPeek({
			text: text,
			promise: setSneakPeekPromise
		}));
		return setSneakPeekPromise.promise;
	};
};

var rateChat = function rateChat(store) {
	return function () {
		var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    rate = _ref3.rate,
		    comment = _ref3.comment;

		var rateChatPromise = deferred();
		if (!rate) {
			rateChatPromise.reject({
				type: 'missing argument',
				reason: 'Missing rate parameter'
			});
			return rateChatPromise.promise;
		}
		if (rate !== rates.GOOD && rate !== rates.NONE && rate !== rates.BAD) {
			rateChatPromise.reject({
				type: 'wrong argument',
				reason: 'Rate argument should be equal "good", "bad" or "none"'
			});
			return rateChatPromise.promise;
		}
		store.dispatch(publicRateChat({
			rate: rate,
			comment: comment,
			promise: rateChatPromise
		}));
		return rateChatPromise.promise;
	};
};

var forwardChatTranscript = function forwardChatTranscript(store) {
	return function () {
		var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    email = _ref4.email;

		var forwardChatTranscriptPromise = deferred();
		if (!email) {
			forwardChatTranscriptPromise.reject({
				type: 'missing argument',
				reason: 'Missing email parameter'
			});
			return forwardChatTranscriptPromise.promise;
		}
		store.dispatch(publicForwardChatTranscript({
			email: email,
			promise: forwardChatTranscriptPromise
		}));
		return forwardChatTranscriptPromise.promise;
	};
};

var closeChat = function closeChat(store) {
	return function () {
		var closeChatPromise = deferred();
		store.dispatch(publicCloseChat({
			promise: closeChatPromise
		}));
		return closeChatPromise.promise;
	};
};

var disconnect = function disconnect(store) {
	return function () {
		var disconnectPromise = deferred();
		store.dispatch(publicDisconnect({
			promise: disconnectPromise
		}));
		return disconnectPromise.promise;
	};
};

var destroy = function destroy(rootTask, emitter) {
	return function () {
		emitter.off('*');
		rootTask.cancel();
	};
};

var getTicketForm = function getTicketForm(store) {
	return function () {
		var getTicketFormPromise = deferred();
		store.dispatch(publicGetTicketForm({
			promise: getTicketFormPromise
		}));
		return getTicketFormPromise.promise;
	};
};

var sendTicketForm = function sendTicketForm(store) {
	return function () {
		var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    name = _ref5.name,
		    email = _ref5.email,
		    subject = _ref5.subject,
		    message = _ref5.message;

		var sendTicketFormPromise = deferred();
		if (!email) {
			sendTicketFormPromise.reject({
				type: 'missing argument',
				reason: 'Missing email'
			});
			return sendTicketFormPromise.promise;
		}
		if (!message) {
			sendTicketFormPromise.reject({
				type: 'missing argument',
				reason: 'Missing message'
			});
			return sendTicketFormPromise.promise;
		}
		store.dispatch(publicSendTicketForm({
			name: name,
			email: email,
			subject: subject,
			message: message,
			promise: sendTicketFormPromise
		}));
		return sendTicketFormPromise.promise;
	};
};

var setVisitorData = function setVisitorData(store) {
	return function () {
		var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    name = _ref6.name,
		    email = _ref6.email,
		    customProperties = _ref6.customProperties,
		    pageUrl = _ref6.pageUrl,
		    pageTitle = _ref6.pageTitle;

		var setVistiorDataPromise = deferred();
		if (!name && !email && !customProperties && !pageUrl && !pageTitle) {
			setVistiorDataPromise.reject({
				type: 'missing argument',
				reason: 'Missing name, email, url or customProperties'
			});
			return setVistiorDataPromise.promise;
		}
		store.dispatch(publicSetVisitorData({
			name: name,
			email: email,
			customProperties: customProperties,
			pageUrl: pageUrl,
			pageTitle: pageTitle,
			promise: setVistiorDataPromise
		}));
		return setVistiorDataPromise.promise;
	};
};

var getVisitorData = function getVisitorData(store) {
	return function () {
		var getVisitorDataPromise = deferred();
		store.dispatch(publicGetVisitorData({
			promise: getVisitorDataPromise
		}));
		return getVisitorDataPromise.promise;
	};
};

export var init = function init() {
	var _initialState;

	var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	    license = _ref7.license,
	    _ref7$group = _ref7.group,
	    group = _ref7$group === undefined ? 0 : _ref7$group,
	    _ref7$environment = _ref7.environment,
	    environment = _ref7$environment === undefined ? environments.PRODUCTION : _ref7$environment;

	var emitter = new mitt();
	if (!license) {
		throw new Error('Missing license parameter');
	}
	if (environment !== environments.PRODUCTION && environment !== environments.LABS && environment !== environments.STAGING) {
		throw new Error('Wrong environment parameter');
	}
	var sessionId = String(Math.random());
	storage.setPrefix('_livechat_' + license);
	var initialState = (_initialState = {
		environment: environment
	}, _initialState[propsConstants.LICENSE] = license, _initialState[propsConstants.GROUP] = group, _initialState[propsConstants.SESSION_ID] = sessionId, _initialState.visitorData = {
		pageUrl: getOr('unknown', 'location.href', isBrowser && document),
		pageTitle: getOr('unknown', '[0].innerHTML', isBrowser && document.getElementsByTagName('title') || {})
	}, _initialState[propsConstants.SECURED_TOKEN] = storage.getItem('securedToken'), _initialState[propsConstants.SECRET_ID] = storage.getItem('secretId'), _initialState);
	var store = configureStore(initialState);
	var visitorId = storage.getItem('visitorId');
	var rootTask = store.runSaga(rootSaga, {
		emitter: emitter
	});
	if (visitorId) {
		store.dispatch(propsActions.setPropertyVisitorId(visitorId));
	}
	return {
		sendMessage: sendMessage(store),
		setSneakPeek: setSneakPeek(store),
		setVisitorData: setVisitorData(store),
		getVisitorData: getVisitorData(store),
		rateChat: rateChat(store),
		forwardChatTranscript: forwardChatTranscript(store),
		closeChat: closeChat(store),
		disconnect: disconnect(store),
		getTicketForm: getTicketForm(store),
		sendTicketForm: sendTicketForm(store),
		on: emitter.on,
		destroy: destroy(rootTask, emitter)
	};
};