var _serverUrl, _apiUrl;

import fetch from 'unfetch';
import { LABS, STAGING, PRODUCTION } from '../constants/environments';

var serverUrl = (_serverUrl = {}, _serverUrl[LABS] = 'https://secure-labs.livechatinc.com', _serverUrl[STAGING] = 'https://secure-lc.livechatinc.com', _serverUrl[PRODUCTION] = 'https://secure.livechatinc.com', _serverUrl);

var apiUrl = (_apiUrl = {}, _apiUrl[LABS] = 'https://api.labs.livechatinc.com', _apiUrl[STAGING] = 'https://api.staging.livechatinc.com', _apiUrl[PRODUCTION] = 'https://api.livechatinc.com', _apiUrl);

var getServerUrl = function getServerUrl(environment, license) {
	if (license === 1520) {
		return serverUrl[STAGING];
	}
	return serverUrl[environment];
};

var getAPIUrl = function getAPIUrl(environment, license) {
	if (license === 1520) {
		return apiUrl[STAGING];
	}
	return apiUrl[environment];
};

var generateRandomId = function generateRandomId(size) {
	var randomId = '';
	var chars = '0123456789abcdefghijklmnopqurstuvwxyzABCDEFGHIJKLMNOPQURSTUVWXYZ';

	for (var counter = 0; counter < size; counter++) {
		randomId += chars.substr(Math.floor(Math.random() * chars.length), 1);
	}

	return randomId;
};

var fetchWithRetry = function fetchWithRetry(url, body) {
	var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	var attempts = options.attempts || 3;
	var retryDelay = options.retryDelay || 1000;
	return new Promise(function (resolve, reject) {
		var fetchRequest = function fetchRequest() {
			fetch(url, body).then(function (response) {
				return resolve(response);
			}).catch(function (error) {
				if (attempts) {
					--attempts;
					return setTimeout(function () {
						fetchRequest();
					}, retryDelay);
				}
				return reject(error);
			});
		};
		fetchRequest();
	});
};

export var sendPostToAPI = function sendPostToAPI(methodName, _ref, options) {
	var environment = _ref.environment,
	    license = _ref.license,
	    body = _ref.body;

	var requestUrl = getAPIUrl(environment, license) + '/' + methodName;
	return fetchWithRetry(requestUrl, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		},
		credentials: 'include',
		body: JSON.stringify(body)
	}, options).then(function (response) {
		return response.json();
	});
};

export var sendPostToWebserv = function sendPostToWebserv(methodName, _ref2, options) {
	var environment = _ref2.environment,
	    license = _ref2.license,
	    body = _ref2.body,
	    securedToken = _ref2.securedToken,
	    secretId = _ref2.secretId;

	var webservPart = methodName === 'status_ping' || methodName.indexOf('get_static_config') !== -1 ? 'v2/' : '';
	var requestUrl = getServerUrl(environment, license) + '/licence/external/' + license + '/' + webservPart + methodName;
	if (securedToken) {
		requestUrl += '?secret_token=' + securedToken;
	}
	if (secretId) {
		requestUrl += '&secret_id=' + secretId;
	}
	return fetchWithRetry(requestUrl, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json'
		},
		credentials: 'include',
		body: JSON.stringify(body)
	}, options).then(function (response) {
		return response.json();
	});
};

export var sendIWCS = function sendIWCS(environment, licenseNumber, command, securedToken, secretId) {
	var requestUrl = getServerUrl(environment, licenseNumber) + '/licence/external/' + licenseNumber + '/tunnel_callback.cgi?' + generateRandomId(20);
	if (securedToken) {
		requestUrl += '&secret_token=' + securedToken;
	}
	if (secretId) {
		requestUrl += '&secret_id=' + secretId;
	}
	requestUrl += '&command=' + encodeURI(command);
	return fetchWithRetry(requestUrl, {
		method: 'GET',
		headers: {
			'Content-Type': 'application/json'
		},
		credentials: 'include'
	}).then(function (response) {
		return response.text();
	}).then(function (responseText) {
		return responseText.split('^');
	});
};