var _marked = /*#__PURE__*/regeneratorRuntime.mark(pingersCaller),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(rootSaga);

import { fork, cancel, take } from 'redux-saga/effects';
import * as publicActions from '../actions/publicActions';
import { safe } from '@livechat/saga-utils';

var restoreConnectionActions = [publicActions.publicSendMessage, publicActions.publicSetVisitorData].map(function (action) {
	return action.getActionName();
});

import configSaga from './configSaga.js';
import pingerSaga from './pingerSaga.js';
import statusPingerSaga from './statusPingerSaga.js';
import publicActionsHandler from './publicActionsHandler.js';
import publicCallbacksHandler from './publicCallbacksHandler.js';
import chatPingerSaga from './chatPingerSaga.js';
import serverActionsSaga from './serverActionsSaga.js';

function pingersCaller() {
	var statusPingerTask, chatPingerTask, pingerTask;
	return regeneratorRuntime.wrap(function pingersCaller$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					if (!true) {
						_context.next = 18;
						break;
					}

					_context.next = 3;
					return safe(fork(statusPingerSaga));

				case 3:
					statusPingerTask = _context.sent;
					_context.next = 6;
					return safe(fork(chatPingerSaga));

				case 6:
					chatPingerTask = _context.sent;
					_context.next = 9;
					return safe(fork(pingerSaga));

				case 9:
					pingerTask = _context.sent;
					_context.next = 12;
					return take(publicActions.publicDisconnect.getActionName());

				case 12:
					_context.next = 14;
					return cancel(statusPingerTask, chatPingerTask, pingerTask);

				case 14:
					_context.next = 16;
					return take(restoreConnectionActions, pingersCaller);

				case 16:
					_context.next = 0;
					break;

				case 18:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

export default function rootSaga(_ref) {
	var emitter = _ref.emitter;
	return regeneratorRuntime.wrap(function rootSaga$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return safe(fork(configSaga));

				case 2:
					_context2.next = 4;
					return safe(fork(publicActionsHandler));

				case 4:
					_context2.next = 6;
					return safe(fork(publicCallbacksHandler, { emitter: emitter }));

				case 6:
					_context2.next = 8;
					return safe(fork(serverActionsSaga));

				case 8:
					_context2.next = 10;
					return safe(fork(pingersCaller));

				case 10:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}