var _marked = /*#__PURE__*/regeneratorRuntime.mark(startChatWatcher),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(newMessageWatcher),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(newFileWatcher),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(visitorIdWatcher),
    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

import { take, call, select, takeEvery, fork } from 'redux-saga/effects';
import { CHAT_STARTED, NEW_MESSAGE, NEW_FILE, CHAT_ENDED, AGENT_CHANGED, STATUS_CHANGED, CONNECTION_STATUS_CHANGED, VISITOR_QUEUED, TYPING_INDICATOR, VISITOR_DATA } from '../constants/publicCallbacks';
import * as chatActions from '../actions/chatActions';
import { waitForState } from '@livechat/saga-utils';
import { propsSelectors } from '../reducers';
import propsActions from '../actions/propsActions';

function startChatWatcher(_ref) {
	var emitter = _ref.emitter;
	var chatId;
	return regeneratorRuntime.wrap(function startChatWatcher$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return call(waitForState, propsSelectors.getPropertyChatId);

				case 2:
					chatId = _context.sent;

					emitter.emit(CHAT_STARTED, {
						chatId: chatId
					});
					_context.next = 6;
					return take(chatActions.chatEnded.getActionName());

				case 6:
					emitter.emit(CHAT_ENDED);

				case 7:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function statusWatcher(_ref2, _ref3) {
	var emitter = _ref2.emitter;
	var payload = _ref3.payload;

	emitter.emit(STATUS_CHANGED, {
		status: payload.data.toLowerCase()
	});
}

function connectionStatusWatcher(_ref4, _ref5) {
	var emitter = _ref4.emitter;
	var payload = _ref5.payload;

	emitter.emit(CONNECTION_STATUS_CHANGED, {
		status: payload.data.toLowerCase()
	});
}

function newMessageWatcher(_ref6, _ref7) {
	var emitter = _ref6.emitter;
	var payload = _ref7.payload;
	var chatId, visitorId, message;
	return regeneratorRuntime.wrap(function newMessageWatcher$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return call(waitForState, propsSelectors.getPropertyChatId);

				case 2:
					chatId = _context2.sent;
					_context2.next = 5;
					return select(propsSelectors.getPropertyVisitorId);

				case 5:
					visitorId = _context2.sent;
					message = {
						id: payload.id,
						timestamp: payload.timestamp,
						authorId: payload.authorType === 'visitor' ? visitorId : payload.authorId,
						text: payload.text,
						chatId: chatId
					};

					if (typeof payload.isMobile !== 'undefined') {
						message.isMobile = payload.isMobile;
					}
					if (typeof payload.customId !== 'undefined') {
						message.customId = payload.customId;
					}
					emitter.emit(NEW_MESSAGE, message);

				case 10:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function newFileWatcher(_ref8, _ref9) {
	var emitter = _ref8.emitter;
	var payload = _ref9.payload;
	var visitorId, message;
	return regeneratorRuntime.wrap(function newFileWatcher$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					_context3.next = 2;
					return select(propsSelectors.getPropertyVisitorId);

				case 2:
					visitorId = _context3.sent;
					message = {
						id: payload.id,
						timestamp: payload.timestamp,
						authorId: payload.authorType === 'visitor' ? visitorId : payload.authorId,
						url: payload.url,
						contentType: payload.contentType,
						size: payload.size
					};

					emitter.emit(NEW_FILE, message);

				case 5:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function newAgentWatcher(_ref10, _ref11) {
	var emitter = _ref10.emitter;
	var payload = _ref11.payload;

	var agentData = {
		name: payload.name,
		id: payload.id
	};
	if (payload.avatarUrl) {
		agentData.avatarUrl = payload.avatarUrl;
	}
	if (payload.jobTitle) {
		agentData.jobTitle = payload.jobTitle;
	}
	emitter.emit(AGENT_CHANGED, agentData);
}

function visitorQueuedWatcher(_ref12, _ref13) {
	var emitter = _ref12.emitter;
	var payload = _ref13.payload;
	var numberInQueue = payload.numberInQueue,
	    waitingTime = payload.waitingTime;

	emitter.emit(VISITOR_QUEUED, {
		numberInQueue: numberInQueue,
		waitingTime: waitingTime
	});
}

function typingIndicatorWatcher(_ref14, _ref15) {
	var emitter = _ref14.emitter;
	var payload = _ref15.payload;
	var authorId = payload.authorId,
	    isTyping = payload.isTyping;

	emitter.emit(TYPING_INDICATOR, {
		authorId: authorId,
		isTyping: isTyping
	});
}

function visitorIdWatcher(_ref16) {
	var emitter = _ref16.emitter;
	var visitorId;
	return regeneratorRuntime.wrap(function visitorIdWatcher$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					_context4.next = 2;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 2:
					visitorId = _context4.sent;

					Promise.resolve({}).then(function () {
						emitter.emit(VISITOR_DATA, {
							id: visitorId
						});
					});

				case 4:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this);
}

export default function _callee(_ref17) {
	var emitter = _ref17.emitter;
	return regeneratorRuntime.wrap(function _callee$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					_context5.next = 2;
					return fork(visitorIdWatcher, { emitter: emitter });

				case 2:
					_context5.next = 4;
					return takeEvery(chatActions.chatStarted.getActionName(), startChatWatcher, { emitter: emitter });

				case 4:
					_context5.next = 6;
					return takeEvery(propsActions.setPropertyChatStatus.getActionName(), statusWatcher, { emitter: emitter });

				case 6:
					_context5.next = 8;
					return takeEvery(propsActions.setPropertyConnectionStatus.getActionName(), connectionStatusWatcher, { emitter: emitter });

				case 8:
					_context5.next = 10;
					return takeEvery(chatActions.newMessage.getActionName(), newMessageWatcher, { emitter: emitter });

				case 10:
					_context5.next = 12;
					return takeEvery(chatActions.newFile.getActionName(), newFileWatcher, { emitter: emitter });

				case 12:
					_context5.next = 14;
					return takeEvery(chatActions.newAgent.getActionName(), newAgentWatcher, { emitter: emitter });

				case 14:
					_context5.next = 16;
					return takeEvery(chatActions.visitorQueued.getActionName(), visitorQueuedWatcher, { emitter: emitter });

				case 16:
					_context5.next = 18;
					return takeEvery(chatActions.typingIndicator.getActionName(), typingIndicatorWatcher, { emitter: emitter });

				case 18:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked5, this);
}