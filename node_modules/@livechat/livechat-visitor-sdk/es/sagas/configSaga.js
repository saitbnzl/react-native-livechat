var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _marked = /*#__PURE__*/regeneratorRuntime.mark(fetchTicketForm),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(setInitialVisitorData),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

import { select, call, put } from 'redux-saga/effects';
import sortBy from 'lodash/fp/sortBy';
import omit from 'lodash/fp/omit';
import compose from 'lodash/fp/compose';
import fromPairs from 'lodash/fp/fromPairs';
import map from 'lodash/fp/map';
import split from 'lodash/fp/split';
import partialRight from 'lodash/fp/partialRight';
import trimStart from 'lodash/fp/trimStart';
import storage from '../utils/storage';
import { getVisitorData } from '../reducers';
import * as chatActions from '../actions/chatActions';

import { propsSelectors, getEnvironment } from '../reducers';
import propsActions from '../actions/propsActions';

import { sendPostToWebserv } from '../utils/serverRequest';

// TODO: replace with separate package version
export var decodeQueryString = compose(fromPairs, map(compose(map(decodeURIComponent), split('='))), split('&'), partialRight(trimStart.convert({ fixed: false }), ['?']));

var getDynamicConfig = function getDynamicConfig(requestData) {
	return sendPostToWebserv('get_dynamic_config.js', _extends({}, requestData, {
		body: {}
	}));
};

var getStaticConfig = function getStaticConfig(staticConfigVersion, requestData) {
	return sendPostToWebserv('get_static_config.' + requestData.group + '.' + staticConfigVersion + '.js', _extends({}, requestData, {
		body: {}
	}));
};

export function fetchTicketForm() {
	var license, group, environment, staticConfigVersion, staticConfigResponse, omitOrder, ticketFormFields;
	return regeneratorRuntime.wrap(function fetchTicketForm$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return select(propsSelectors.getPropertyLicense);

				case 2:
					license = _context.sent;
					_context.next = 5;
					return select(propsSelectors.getPropertyGroup);

				case 5:
					group = _context.sent;
					_context.next = 8;
					return select(getEnvironment);

				case 8:
					environment = _context.sent;
					_context.next = 11;
					return select(propsSelectors.getPropertyStaticConfigVersion);

				case 11:
					staticConfigVersion = _context.sent;
					_context.next = 14;
					return call(getStaticConfig, staticConfigVersion, {
						environment: environment,
						license: license,
						group: group
					});

				case 14:
					staticConfigResponse = _context.sent;
					omitOrder = omit('order');
					ticketFormFields = sortBy('order', staticConfigResponse.offline_form.fields).map(omitOrder);
					_context.next = 19;
					return put(propsActions.setPropertyTicketForm(ticketFormFields));

				case 19:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

function setInitialVisitorData(dynamicConfigResponse) {
	var visitorData, visitorId, visitorDataToSet;
	return regeneratorRuntime.wrap(function setInitialVisitorData$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return select(getVisitorData);

				case 2:
					visitorData = _context2.sent;
					_context2.next = 5;
					return select(propsSelectors.getPropertyVisitorId);

				case 5:
					visitorId = _context2.sent;
					visitorDataToSet = _extends({}, visitorData);
					_context2.next = 9;
					return put(propsActions.setPropertyStaticConfigVersion(dynamicConfigResponse.static_config_version));

				case 9:
					if (dynamicConfigResponse.visitor.nick) {
						visitorDataToSet.name = dynamicConfigResponse.visitor.nick;
					}
					if (dynamicConfigResponse.visitor.params) {
						visitorDataToSet.customProperties = _extends({}, visitorDataToSet.customParams, decodeQueryString(dynamicConfigResponse.visitor.params));
					}

					if (!(dynamicConfigResponse.visitor.nick || dynamicConfigResponse.visitor.params)) {
						_context2.next = 14;
						break;
					}

					_context2.next = 14;
					return put(chatActions.setVisitorData({
						visitorData: visitorDataToSet
					}));

				case 14:
					if (visitorId) {
						_context2.next = 18;
						break;
					}

					_context2.next = 17;
					return put(propsActions.setPropertyVisitorId(dynamicConfigResponse.visitor.session));

				case 17:
					storage.setItem('visitorId', dynamicConfigResponse.visitor.session);

				case 18:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

export default function _callee() {
	var license, group, environment, dynamicConfigResponse;
	return regeneratorRuntime.wrap(function _callee$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					_context3.next = 2;
					return select(propsSelectors.getPropertyLicense);

				case 2:
					license = _context3.sent;
					_context3.next = 5;
					return select(propsSelectors.getPropertyGroup);

				case 5:
					group = _context3.sent;
					_context3.next = 8;
					return select(getEnvironment);

				case 8:
					environment = _context3.sent;
					_context3.next = 11;
					return call(getDynamicConfig, {
						environment: environment,
						license: license,
						group: group
					});

				case 11:
					dynamicConfigResponse = _context3.sent;
					_context3.next = 14;
					return call(setInitialVisitorData, dynamicConfigResponse);

				case 14:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}