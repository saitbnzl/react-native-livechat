var _marked = /*#__PURE__*/regeneratorRuntime.mark(sendMessageHandler),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(setVisitorDataHandler),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(setSneakPeekHandler),
    _marked4 = /*#__PURE__*/regeneratorRuntime.mark(forwardChatTranscriptHandler),
    _marked5 = /*#__PURE__*/regeneratorRuntime.mark(closeChatHandler),
    _marked6 = /*#__PURE__*/regeneratorRuntime.mark(rateChatHandler),
    _marked7 = /*#__PURE__*/regeneratorRuntime.mark(disconnectHandler),
    _marked8 = /*#__PURE__*/regeneratorRuntime.mark(getTicketFormHandler),
    _marked9 = /*#__PURE__*/regeneratorRuntime.mark(getVisitorDataHandler),
    _marked10 = /*#__PURE__*/regeneratorRuntime.mark(sendTicketFormHandler),
    _marked11 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

import * as publicActions from '../actions/publicActions';
import { call, take, actionChannel, takeEvery, put, select } from 'redux-saga/effects';
import { waitForState } from '@livechat/saga-utils';
import { buffers } from 'redux-saga';
import sendMessage from './requests/sendMessage';
import startChat from './requests/startChat';
import closeChat from './requests/closeChat';
import { propsSelectors, getEnvironment } from '../reducers';
import * as chatStates from '../constants/chatStates';
import * as chatActions from '../actions/chatActions';
import { getVisitorData } from '../reducers';
import propsActions from '../actions/propsActions';
import get from 'lodash/fp/get';
import isNil from 'lodash/fp/isNil';
import omitBy from 'lodash/fp/omitBy';
import merge from 'lodash/fp/merge';
import pick from 'lodash/fp/pick';
import { sendIWCS, sendPostToWebserv, sendPostToAPI } from '../utils/serverRequest';
import { translateToIWCS } from '../utils/IWCSTranslator';
import { fetchTicketForm } from '../sagas/configSaga';

var publicSendMessage = publicActions.publicSendMessage,
    publicSetVisitorData = publicActions.publicSetVisitorData,
    publicGetVisitorData = publicActions.publicGetVisitorData,
    publicRateChat = publicActions.publicRateChat,
    publicSetSneakPeek = publicActions.publicSetSneakPeek,
    publicForwardChatTranscript = publicActions.publicForwardChatTranscript,
    publicCloseChat = publicActions.publicCloseChat,
    publicDisconnect = publicActions.publicDisconnect,
    publicGetTicketForm = publicActions.publicGetTicketForm,
    publicSendTicketForm = publicActions.publicSendTicketForm;


function sendMessageHandler(action) {
	var chatState, _action$payload, customId, text, incomingResponse;

	return regeneratorRuntime.wrap(function sendMessageHandler$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return call(waitForState, propsSelectors.getPropertyChatState);

				case 2:
					chatState = _context.sent;
					_action$payload = action.payload, customId = _action$payload.customId, text = _action$payload.text;
					_context.prev = 4;

					if (!(chatState !== chatStates.CHATTING)) {
						_context.next = 10;
						break;
					}

					_context.next = 8;
					return call(startChat, {
						customId: customId,
						text: text
					});

				case 8:
					_context.next = 12;
					break;

				case 10:
					_context.next = 12;
					return call(sendMessage, {
						customId: customId,
						text: text
					});

				case 12:
					_context.next = 17;
					break;

				case 14:
					_context.prev = 14;
					_context.t0 = _context['catch'](4);

					action.payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					});

				case 17:
					_context.next = 19;
					return take(function (reduxAction) {
						return reduxAction.type === chatActions.newMessage.getActionName() && get('payload.customId', reduxAction) === customId;
					});

				case 19:
					incomingResponse = _context.sent;

					action.payload.promise.resolve({
						id: incomingResponse.payload.id,
						timestamp: incomingResponse.payload.timestamp
					});

				case 21:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this, [[4, 14]]);
}

function setVisitorDataHandler(action) {
	var visitorData, parsedNewVisitorData, requestId, newVisitorData, setAction;
	return regeneratorRuntime.wrap(function setVisitorDataHandler$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return select(getVisitorData);

				case 2:
					visitorData = _context2.sent;
					parsedNewVisitorData = omitBy(isNil, pick(['name', 'email', 'pageUrl', 'pageTitle', 'customProperties'], action.payload));
					requestId = String(Math.random());
					newVisitorData = merge(visitorData, parsedNewVisitorData);
					_context2.next = 8;
					return put(chatActions.setVisitorData({
						requestId: requestId,
						visitorData: newVisitorData
					}));

				case 8:
					_context2.next = 10;
					return take(function (anyAction) {
						return (anyAction.type === chatActions.visitorDataSet.getActionName() || anyAction.type === chatActions.visitorDataSetError.getActionName()) && anyAction.payload.requestId === requestId;
					});

				case 10:
					setAction = _context2.sent;

					if (!(setAction.type === chatActions.visitorDataSet.getActionName())) {
						_context2.next = 13;
						break;
					}

					return _context2.abrupt('return', action.payload.promise.resolve(setAction.payload.visitorData));

				case 13:
					return _context2.abrupt('return', action.payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					}));

				case 14:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}

function setSneakPeekHandler(action) {
	return regeneratorRuntime.wrap(function setSneakPeekHandler$(_context3) {
		while (1) {
			switch (_context3.prev = _context3.next) {
				case 0:
					_context3.next = 2;
					return put(propsActions.setPropertySneakPeek(action.payload.text));

				case 2:
					action.payload.promise.resolve({
						success: true
					});

				case 3:
				case 'end':
					return _context3.stop();
			}
		}
	}, _marked3, this);
}

function forwardChatTranscriptHandler(action) {
	var license, environment, visitorId, chatId, securedToken, secretId, translatedIWCS;
	return regeneratorRuntime.wrap(function forwardChatTranscriptHandler$(_context4) {
		while (1) {
			switch (_context4.prev = _context4.next) {
				case 0:
					_context4.next = 2;
					return select(propsSelectors.getPropertyLicense);

				case 2:
					license = _context4.sent;
					_context4.next = 5;
					return select(getEnvironment);

				case 5:
					environment = _context4.sent;
					_context4.next = 8;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 8:
					visitorId = _context4.sent;
					_context4.next = 11;
					return select(propsSelectors.getPropertyChatId);

				case 11:
					chatId = _context4.sent;
					_context4.next = 14;
					return select(propsSelectors.getPropertySecuredToken);

				case 14:
					securedToken = _context4.sent;
					_context4.next = 17;
					return select(propsSelectors.getPropertySecretId);

				case 17:
					secretId = _context4.sent;

					if (chatId) {
						_context4.next = 21;
						break;
					}

					action.payload.promise.reject({
						type: 'state',
						reason: 'There is no chat to forward transcript'
					});
					return _context4.abrupt('return');

				case 21:
					translatedIWCS = translateToIWCS('forwardChatTranscript', {
						visitorId: visitorId,
						chatId: chatId,
						email: action.payload.email
					});
					_context4.prev = 22;
					_context4.next = 25;
					return call(sendIWCS, environment, license, translatedIWCS, securedToken, secretId);

				case 25:
					_context4.next = 31;
					break;

				case 27:
					_context4.prev = 27;
					_context4.t0 = _context4['catch'](22);

					action.payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					});
					return _context4.abrupt('return');

				case 31:
					action.payload.promise.resolve({
						success: true
					});

				case 32:
				case 'end':
					return _context4.stop();
			}
		}
	}, _marked4, this, [[22, 27]]);
}

function closeChatHandler(action) {
	var chatId;
	return regeneratorRuntime.wrap(function closeChatHandler$(_context5) {
		while (1) {
			switch (_context5.prev = _context5.next) {
				case 0:
					_context5.next = 2;
					return select(propsSelectors.getPropertyChatId);

				case 2:
					chatId = _context5.sent;

					if (chatId) {
						_context5.next = 6;
						break;
					}

					action.payload.promise.reject({
						type: 'state',
						reason: 'There is no chat to close'
					});
					return _context5.abrupt('return');

				case 6:
					_context5.prev = 6;
					_context5.next = 9;
					return call(closeChat);

				case 9:
					_context5.next = 15;
					break;

				case 11:
					_context5.prev = 11;
					_context5.t0 = _context5['catch'](6);

					action.payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					});
					return _context5.abrupt('return');

				case 15:
					_context5.next = 17;
					return take(chatActions.chatEnded.getActionName());

				case 17:
					action.payload.promise.resolve({
						success: true
					});

				case 18:
				case 'end':
					return _context5.stop();
			}
		}
	}, _marked5, this, [[6, 11]]);
}

function rateChatHandler(action) {
	var license, environment, visitorId, chatId, securedToken, translatedIWCS;
	return regeneratorRuntime.wrap(function rateChatHandler$(_context6) {
		while (1) {
			switch (_context6.prev = _context6.next) {
				case 0:
					_context6.next = 2;
					return select(propsSelectors.getPropertyLicense);

				case 2:
					license = _context6.sent;
					_context6.next = 5;
					return select(getEnvironment);

				case 5:
					environment = _context6.sent;
					_context6.next = 8;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 8:
					visitorId = _context6.sent;
					_context6.next = 11;
					return select(propsSelectors.getPropertyChatId);

				case 11:
					chatId = _context6.sent;
					_context6.next = 14;
					return select(propsSelectors.getPropertySecuredToken);

				case 14:
					securedToken = _context6.sent;

					if (chatId) {
						_context6.next = 18;
						break;
					}

					action.payload.promise.reject({
						type: 'state',
						reason: 'There is no chat to rate'
					});
					return _context6.abrupt('return');

				case 18:
					translatedIWCS = translateToIWCS('rateChat', {
						visitorId: visitorId,
						chatId: chatId,
						rate: action.payload.rate
					});
					_context6.prev = 19;
					_context6.next = 22;
					return call(sendIWCS, environment, license, translatedIWCS, securedToken);

				case 22:
					_context6.next = 28;
					break;

				case 24:
					_context6.prev = 24;
					_context6.t0 = _context6['catch'](19);

					action.payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					});
					return _context6.abrupt('return');

				case 28:
					_context6.next = 30;
					return take(chatActions.rateChat.getActionName());

				case 30:
					if (!action.payload.comment) {
						_context6.next = 40;
						break;
					}

					_context6.prev = 31;
					_context6.next = 34;
					return call(sendPostToWebserv, 'send_rating_comment', {
						environment: environment,
						license: license,
						securedToken: securedToken,
						body: {
							comment: action.payload.comment,
							conference_id: chatId,
							random_id: String(Math.random()),
							visitor: {
								id: visitorId
							}
						}
					});

				case 34:
					_context6.next = 40;
					break;

				case 36:
					_context6.prev = 36;
					_context6.t1 = _context6['catch'](31);

					action.payload.promise.reject({
						type: 'connection',
						reason: 'Rate Comment request failed'
					});
					return _context6.abrupt('return');

				case 40:
					action.payload.promise.resolve({
						success: true
					});

				case 41:
				case 'end':
					return _context6.stop();
			}
		}
	}, _marked6, this, [[19, 24], [31, 36]]);
}

function disconnectHandler(_ref) {
	var payload = _ref.payload;
	var chatState;
	return regeneratorRuntime.wrap(function disconnectHandler$(_context7) {
		while (1) {
			switch (_context7.prev = _context7.next) {
				case 0:
					_context7.next = 2;
					return select(propsSelectors.getPropertyChatState);

				case 2:
					chatState = _context7.sent;

					if (!(chatState === chatStates.CHATTING)) {
						_context7.next = 6;
						break;
					}

					payload.promise.reject({
						type: 'state',
						reason: "You can't disconnect during the chat"
					});
					return _context7.abrupt('return');

				case 6:
					payload.promise.resolve({
						success: true
					});

				case 7:
				case 'end':
					return _context7.stop();
			}
		}
	}, _marked7, this);
}

function getTicketFormHandler(_ref2) {
	var payload = _ref2.payload;
	var ticketForm;
	return regeneratorRuntime.wrap(function getTicketFormHandler$(_context8) {
		while (1) {
			switch (_context8.prev = _context8.next) {
				case 0:
					_context8.next = 2;
					return select(propsSelectors.getPropertyTicketForm);

				case 2:
					ticketForm = _context8.sent;

					if (ticketForm) {
						_context8.next = 15;
						break;
					}

					_context8.prev = 4;
					_context8.next = 7;
					return call(fetchTicketForm);

				case 7:
					_context8.next = 9;
					return select(propsSelectors.getPropertyTicketForm);

				case 9:
					ticketForm = _context8.sent;
					_context8.next = 15;
					break;

				case 12:
					_context8.prev = 12;
					_context8.t0 = _context8['catch'](4);
					return _context8.abrupt('return', payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					}));

				case 15:
					return _context8.abrupt('return', payload.promise.resolve({
						fields: ticketForm
					}));

				case 16:
				case 'end':
					return _context8.stop();
			}
		}
	}, _marked8, this, [[4, 12]]);
}

function getVisitorDataHandler(_ref3) {
	var payload = _ref3.payload;
	var visitorData;
	return regeneratorRuntime.wrap(function getVisitorDataHandler$(_context9) {
		while (1) {
			switch (_context9.prev = _context9.next) {
				case 0:
					_context9.next = 2;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 2:
					_context9.next = 4;
					return select(getVisitorData);

				case 4:
					visitorData = _context9.sent;
					return _context9.abrupt('return', payload.promise.resolve(visitorData));

				case 6:
				case 'end':
					return _context9.stop();
			}
		}
	}, _marked9, this);
}

function sendTicketFormHandler(_ref4) {
	var payload = _ref4.payload;
	var environment, license, visitorId, group, visitorData, body;
	return regeneratorRuntime.wrap(function sendTicketFormHandler$(_context10) {
		while (1) {
			switch (_context10.prev = _context10.next) {
				case 0:
					_context10.next = 2;
					return select(getEnvironment);

				case 2:
					environment = _context10.sent;
					_context10.next = 5;
					return select(propsSelectors.getPropertyLicense);

				case 5:
					license = _context10.sent;
					_context10.next = 8;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 8:
					visitorId = _context10.sent;
					_context10.next = 11;
					return select(propsSelectors.getPropertyGroup);

				case 11:
					group = _context10.sent;
					_context10.next = 14;
					return select(getVisitorData);

				case 14:
					visitorData = _context10.sent;
					body = {
						group: group,
						licence_id: license,
						ticket_message: payload.message,
						offline_message: payload.message,
						requester: {
							mail: payload.email,
							name: payload.name
						},
						subject: payload.subject,
						visitor_id: visitorId
					};

					if (visitorData.pageUrl) {
						body.source = {
							url: visitorData.pageUrl
						};
					}
					_context10.prev = 17;
					_context10.next = 20;
					return call(sendPostToAPI, 'v2/tickets/new', {
						environment: environment,
						license: license,
						body: body
					});

				case 20:
					payload.promise.resolve({
						success: true
					});
					_context10.next = 26;
					break;

				case 23:
					_context10.prev = 23;
					_context10.t0 = _context10['catch'](17);

					payload.promise.reject({
						type: 'connection',
						reason: 'Request failed'
					});

				case 26:
				case 'end':
					return _context10.stop();
			}
		}
	}, _marked10, this, [[17, 23]]);
}

export default function _callee() {
	var sendMessageChannel, action;
	return regeneratorRuntime.wrap(function _callee$(_context11) {
		while (1) {
			switch (_context11.prev = _context11.next) {
				case 0:
					_context11.next = 2;
					return takeEvery(publicSetVisitorData.getActionName(), setVisitorDataHandler);

				case 2:
					_context11.next = 4;
					return takeEvery(publicGetTicketForm.getActionName(), getTicketFormHandler);

				case 4:
					_context11.next = 6;
					return takeEvery(publicSendTicketForm.getActionName(), sendTicketFormHandler);

				case 6:
					_context11.next = 8;
					return takeEvery(publicRateChat.getActionName(), rateChatHandler);

				case 8:
					_context11.next = 10;
					return takeEvery(publicSetSneakPeek.getActionName(), setSneakPeekHandler);

				case 10:
					_context11.next = 12;
					return takeEvery(publicCloseChat.getActionName(), closeChatHandler);

				case 12:
					_context11.next = 14;
					return takeEvery(publicForwardChatTranscript.getActionName(), forwardChatTranscriptHandler);

				case 14:
					_context11.next = 16;
					return takeEvery(publicDisconnect.getActionName(), disconnectHandler);

				case 16:
					_context11.next = 18;
					return takeEvery(publicGetVisitorData.getActionName(), getVisitorDataHandler);

				case 18:
					_context11.next = 20;
					return actionChannel(publicSendMessage.getActionName(), buffers.expanding());

				case 20:
					sendMessageChannel = _context11.sent;

				case 21:
					if (!true) {
						_context11.next = 29;
						break;
					}

					_context11.next = 24;
					return take(sendMessageChannel);

				case 24:
					action = _context11.sent;
					_context11.next = 27;
					return call(sendMessageHandler, action);

				case 27:
					_context11.next = 21;
					break;

				case 29:
				case 'end':
					return _context11.stop();
			}
		}
	}, _marked11, this);
}