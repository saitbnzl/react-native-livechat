var _marked = /*#__PURE__*/regeneratorRuntime.mark(parseIncomingServerMessage),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(_callee);

import { take, call, select, put, actionChannel } from 'redux-saga/effects';
import { buffers } from 'redux-saga';
import * as JSONMessageNames from '../constants/JSONMessageNames';
import { IWCSMessageNames } from '../utils/IWCSTranslator';
import * as chatActions from '../actions/chatActions';
import getOr from 'lodash/fp/getOr';
import storage from '../utils/storage';
import { incomingMessage } from '../actions/serverActions';
import { propsSelectors } from '../reducers';
import * as chatStates from '../constants/chatStates';
import propsActions from '../actions/propsActions';

function parseIncomingServerMessage(_ref) {
	var payload = _ref.payload;
	var message, chatId;
	return regeneratorRuntime.wrap(function parseIncomingServerMessage$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					message = payload.message;

					message.timestamp *= 1000;

					_context.t0 = message.name;
					_context.next = _context.t0 === JSONMessageNames.START_CHAT ? 5 : _context.t0 === JSONMessageNames.SEND_MESSAGE ? 11 : _context.t0 === IWCSMessageNames.RATE_CHAT ? 14 : _context.t0 === JSONMessageNames.CHAT_ATTACHMENT ? 17 : _context.t0 === IWCSMessageNames.NEW_AGENT_MESSAGE ? 20 : _context.t0 === IWCSMessageNames.CHAT_ENDED ? 23 : _context.t0 === IWCSMessageNames.NEW_AGENT ? 31 : _context.t0 === IWCSMessageNames.VISITOR_QUEUED ? 40 : _context.t0 === IWCSMessageNames.TYPING_INDICATOR ? 43 : 46;
					break;

				case 5:
					_context.next = 7;
					return put(chatActions.chatStarted({
						securedToken: getOr(storage.getItem('securedToken'), 'securedToken', payload)
					}));

				case 7:
					if (!message.data.visitorMessage) {
						_context.next = 10;
						break;
					}

					_context.next = 10;
					return put(chatActions.newMessage({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorType: 'visitor',
						text: message.data.visitorMessage,
						customId: message.data.randomId
					}));

				case 10:
					return _context.abrupt('break', 47);

				case 11:
					_context.next = 13;
					return put(chatActions.newMessage({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorType: 'visitor',
						text: message.data.message,
						customId: message.data.randomId
					}));

				case 13:
					return _context.abrupt('break', 47);

				case 14:
					_context.next = 16;
					return put(chatActions.rateChat({
						id: message.uniqueId,
						timestamp: message.timestamp,
						rate: message.data.rate,
						comment: message.data.comment
					}));

				case 16:
					return _context.abrupt('break', 47);

				case 17:
					_context.next = 19;
					return put(chatActions.newFile({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorId: message.data.author.login || 'visitor',
						authorType: message.data.author.type,
						url: message.data.files[0].url,
						size: message.data.files[0].size,
						contentType: message.data.files[0]['content-type']
					}));

				case 19:
					return _context.abrupt('break', 47);

				case 20:
					_context.next = 22;
					return put(chatActions.newMessage({
						id: message.uniqueId,
						timestamp: message.timestamp,
						authorType: 'agent',
						text: message.data.message,
						isMobile: message.data.isMobile,
						authorId: message.data.authorId
					}));

				case 22:
					return _context.abrupt('break', 47);

				case 23:
					_context.next = 25;
					return put(chatActions.chatEnded());

				case 25:
					_context.next = 27;
					return put(propsActions.setPropertyChatState(chatStates.NOT_CHATTING));

				case 27:
					_context.next = 29;
					return put(propsActions.removePropertySecuredToken());

				case 29:
					storage.removeItem('securedToken');
					return _context.abrupt('break', 47);

				case 31:
					_context.next = 33;
					return put(chatActions.newAgent({
						id: message.data.id,
						name: message.data.name,
						jobTitle: message.data.jobTitle,
						avatarUrl: message.data.avatarUrl
					}));

				case 33:
					_context.next = 35;
					return select(propsSelectors.getPropertyChatId);

				case 35:
					chatId = _context.sent;

					if (chatId) {
						_context.next = 39;
						break;
					}

					_context.next = 39;
					return put(propsActions.setPropertyChatId(message.data.chatId));

				case 39:
					return _context.abrupt('break', 47);

				case 40:
					_context.next = 42;
					return put(chatActions.visitorQueued({
						numberInQueue: message.data.numberInQueue,
						waitingTime: message.data.waitingTime
					}));

				case 42:
					return _context.abrupt('break', 47);

				case 43:
					_context.next = 45;
					return put(chatActions.typingIndicator({
						authorId: message.data.authorId,
						isTyping: message.data.isTyping
					}));

				case 45:
					return _context.abrupt('break', 47);

				case 46:
					return _context.abrupt('return');

				case 47:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

export default function _callee() {
	var incomingMessageChannel, action;
	return regeneratorRuntime.wrap(function _callee$(_context2) {
		while (1) {
			switch (_context2.prev = _context2.next) {
				case 0:
					_context2.next = 2;
					return actionChannel(incomingMessage.getActionName(), buffers.expanding());

				case 2:
					incomingMessageChannel = _context2.sent;

				case 3:
					if (!true) {
						_context2.next = 11;
						break;
					}

					_context2.next = 6;
					return take(incomingMessageChannel);

				case 6:
					action = _context2.sent;
					_context2.next = 9;
					return call(parseIncomingServerMessage, action);

				case 9:
					_context2.next = 3;
					break;

				case 11:
				case 'end':
					return _context2.stop();
			}
		}
	}, _marked2, this);
}