var _marked = /*#__PURE__*/regeneratorRuntime.mark(sendMessage);

import { waitForState } from '@livechat/saga-utils';
import { call, select, put } from 'redux-saga/effects';
import { sendPostToWebserv } from '../../utils/serverRequest';
import { propsSelectors, getEnvironment } from '../../reducers';

function sendMessage(_ref) {
	var customId = _ref.customId,
	    text = _ref.text;
	var license, visitorId, securedToken, secretId, environment, sendMessageData, sendMessageResponse;
	return regeneratorRuntime.wrap(function sendMessage$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return select(propsSelectors.getPropertyLicense);

				case 2:
					license = _context.sent;
					_context.next = 5;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 5:
					visitorId = _context.sent;
					_context.next = 8;
					return select(propsSelectors.getPropertySecuredToken);

				case 8:
					securedToken = _context.sent;
					_context.next = 11;
					return select(propsSelectors.getPropertySecretId);

				case 11:
					secretId = _context.sent;
					_context.next = 14;
					return select(getEnvironment);

				case 14:
					environment = _context.sent;
					sendMessageData = {
						environment: environment,
						license: license,
						securedToken: securedToken,
						secretId: secretId,
						body: {
							author: 'visitor',
							message: text,
							message_id: customId,
							random_id: customId,
							visitor: {
								id: visitorId
							}
						}
					};
					_context.next = 18;
					return call(sendPostToWebserv, 'send_message', sendMessageData);

				case 18:
					sendMessageResponse = _context.sent;

				case 19:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

export default sendMessage;