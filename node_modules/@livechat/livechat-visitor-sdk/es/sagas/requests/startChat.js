var _marked = /*#__PURE__*/regeneratorRuntime.mark(startChat);

import { call, select, put } from 'redux-saga/effects';
import { waitForState } from '@livechat/saga-utils';
import propsActions from '../../actions/propsActions';
import { sendPostToWebserv } from '../../utils/serverRequest';
import { propsSelectors, getEnvironment } from '../../reducers';
import storage from '../../utils/storage';
import * as chatStates from '../../constants/chatStates';
import { getVisitorData } from '../../reducers';

function startChat(_ref) {
	var customId = _ref.customId,
	    text = _ref.text;
	var license, group, visitorId, visitorData, environment, startChatBody, startChatData, startChatResponse;
	return regeneratorRuntime.wrap(function startChat$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return select(propsSelectors.getPropertyLicense);

				case 2:
					license = _context.sent;
					_context.next = 5;
					return select(propsSelectors.getPropertyGroup);

				case 5:
					group = _context.sent;
					_context.next = 8;
					return call(waitForState, propsSelectors.getPropertyVisitorId);

				case 8:
					visitorId = _context.sent;
					_context.next = 11;
					return select(getVisitorData);

				case 11:
					visitorData = _context.sent;
					_context.next = 14;
					return select(getEnvironment);

				case 14:
					environment = _context.sent;
					startChatBody = {
						group: group,
						source_group: group,
						details: '',
						details_labels: '',
						from_manual_invitation: false,
						integration_params: '',
						random_id: customId,
						trigger_unique_id: '',
						version: 'Embedded',
						custom_variables: {},
						welcome_message: '',
						is_mobile: false,
						return_secured_session_id: true,
						visitor: {
							id: visitorId,
							nick: visitorData.name || 'Client',
							email: visitorData.email || ''
						}
					};

					if (text) {
						startChatBody.visitor_message = text;
						startChatBody.visitor_message_id = customId;
					}
					if (visitorData.customProperties) {
						startChatBody.custom_variables = visitorData.customProperties;
					}
					startChatData = {
						license: license,
						environment: environment,
						body: startChatBody
					};
					_context.next = 21;
					return call(sendPostToWebserv, 'start_chat', startChatData);

				case 21:
					startChatResponse = _context.sent;

					if (!startChatResponse.secured_session_id) {
						_context.next = 26;
						break;
					}

					_context.next = 25;
					return put(propsActions.setPropertySecretId(startChatResponse.secured_session_id));

				case 25:
					storage.setItem('secretId', startChatResponse.secured_session_id);

				case 26:
					if (!startChatResponse.secured_token) {
						_context.next = 32;
						break;
					}

					_context.next = 29;
					return put(propsActions.setPropertySecuredToken(startChatResponse.secured_token));

				case 29:
					_context.next = 31;
					return put(propsActions.setPropertyChatState(chatStates.CHATTING));

				case 31:
					storage.setItem('securedToken', startChatResponse.secured_token);

				case 32:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

export default startChat;