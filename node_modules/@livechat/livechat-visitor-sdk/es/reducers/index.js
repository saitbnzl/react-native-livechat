var _setVisitorDetailsRed;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { createReducer, createPropsReducer, createPropsSelectors } from '@livechat/redux-utils';
import { propsConstants } from '../actions/propsActions';
import { setVisitorData } from '../actions/chatActions';

import map from 'lodash/fp/map';
import values from 'lodash/fp/values';
import compose from 'lodash/fp/compose';
import mergeAll from 'lodash/fp/mergeAll';

export var initialState = {};

var reducers = compose(mergeAll, map(createPropsReducer), values)(propsConstants);

var selectors = compose(mergeAll, map(createPropsSelectors), values)(propsConstants);

export var propsSelectors = selectors;
export var getEnvironment = function getEnvironment(state) {
	return state.environment;
};

var setVisitorDetailsReducer = (_setVisitorDetailsRed = {}, _setVisitorDetailsRed[setVisitorData.getActionName()] = function (state, action) {
	return _extends({}, state, {
		visitorData: action.visitorData
	});
}, _setVisitorDetailsRed);

export var getVisitorData = function getVisitorData(state) {
	return state.visitorData;
};

export default createReducer(initialState, _extends({}, setVisitorDetailsReducer, reducers));