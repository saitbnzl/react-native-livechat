'use strict';

exports.__esModule = true;
exports.safe = undefined;
exports.waitForState = waitForState;

var _effects = require('redux-saga/effects');

var _marked = /*#__PURE__*/regeneratorRuntime.mark(waitForState);

function waitForState(selector) {
	for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		args[_key - 1] = arguments[_key];
	}

	var state;
	return regeneratorRuntime.wrap(function waitForState$(_context) {
		while (1) {
			switch (_context.prev = _context.next) {
				case 0:
					_context.next = 2;
					return _effects.select.apply(undefined, [selector].concat(args));

				case 2:
					state = _context.sent;

					if (!(typeof state !== 'undefined')) {
						_context.next = 5;
						break;
					}

					return _context.abrupt('return', state);

				case 5:
					_context.next = 7;
					return (0, _effects.take)('*');

				case 7:
					if (true) {
						_context.next = 0;
						break;
					}

				case 8:
				case 'end':
					return _context.stop();
			}
		}
	}, _marked, this);
}

var safe = exports.safe = function safe(effect) {
	return (0, _effects.fork)( /*#__PURE__*/regeneratorRuntime.mark(function safeRunner() {
		return regeneratorRuntime.wrap(function safeRunner$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						_context2.prev = 0;
						_context2.next = 3;
						return effect;

					case 3:
						return _context2.abrupt('return', _context2.sent);

					case 6:
						_context2.prev = 6;
						_context2.t0 = _context2['catch'](0);
						return _context2.abrupt('return', null);

					case 9:
					case 'end':
						return _context2.stop();
				}
			}
		}, safeRunner, this, [[0, 6]]);
	}));
};